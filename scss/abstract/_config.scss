//====COLORS=====//

$clr-primary: (
  100: hsl(181, 100%, 41%),
  200: hsl(51, 100%, 50%),
  300: hsl(0, 0%, 21%),
  400: hsl(0, 0%, 17%)
);

$clr-neutral: (
  100: hsl(0, 0%, 100%),
  200: hsl(0, 0%, 83%),
  300: hsl(0, 0%, 66%),
);


/*

Blue-based Dark Mode:

Primary Color: #1E90FF (Dodger Blue)
Secondary Color: #FFD700 (Gold)
Accent Color: #FF6347 (Tomato)
Purple-based Dark Mode:

Primary Color: #8A2BE2 (Blue Violet)
Secondary Color: #FFA500 (Orange)
Accent Color: #00FF7F (Spring Green)
Green-based Dark Mode:

Primary Color: #32CD32 (Lime Green)
Secondary Color: #FF1493 (Deep Pink)
Accent Color: #00CED1 (Dark Turquoise)
Red-based Dark Mode:

Primary Color: #FF4500 (Orange Red)
Secondary Color: #FF00FF (Magenta)
Accent Color: #00FF00 (Lime)
Gray-based Dark Mode:

Primary Color: #808080 (Gray)
Secondary Color: #D3D3D3 (Light Gray)
Accent Color: #A9A9A9 (Dark Gray)
*/



//=======FONTS=======//

@import url('https://fonts.googleapis.com/css2?family=Commissioner:wght@400;500;700&display=swap');

$ff: 'Commissioner', sans-serif;

$regular: 400;
$medium: 500;
$bold: 700;




//====MIXIN=====//

@mixin bgGradient($clr1,$clr2) {
  background: linear-gradient(to bottom, $clr1 0%, $clr2 100%);
}

@mixin getColor($clr, $key) {
  color: map-get($clr, $key );
}

@mixin getBg($clr, $key) {
  background-color: map-get($clr, $key );
}

@mixin ff-title($fw: $medium) {
  font-family: $ff-title;
  font-weight: $fw;
}
@mixin ff($fw: $semi-bold) {
  font-family: $ff;
  font-weight: $fw;
}

@mixin icon($content, $fs, $pseudo ) {
  &::#{$pseudo} {
    display: inline-block;
    text-rendering: auto;
    -webkit-font-smoothing: antialiased;
    content: "#{$content}";
    font: var(--fa-font-solid);
    font-size: $fs;
  }
}

@mixin container($min1,$min2) {
  width: min($min1,$min2);
  margin-inline: auto;
}

@mixin flex($fd,$gap) {
  display: flex;
  flex-direction: $fd;
  gap: $gap;
}

@mixin grid($gap) {
  display: grid;
  gap: $gap;
}

@mixin hover($property,$map,$key) {
  $clr: map-get($map , $key );
  @media (hover: hover) and (pointer: fine) {
    transition: .6s;

    &:hover {
      #{$property}: $clr;
    }

  }

  &:active {
    #{$property} : $clr;
  }
}

@mixin center() {
  display: grid;
  place-items: center;
}

@mixin contrastText($clr,$map) {
  $bg: map-get($clr, $map );
  background-color: $bg;

  @if (lightness($bg) > 50) {
    color: map-get($clr-primary, 300 ); // Use dark text color for light background
  } @else {
    color: map-get($clr-neutral, 100 ); // Use light text color for dark background
  }

}

@mixin animation($name, $type) {
  animation: $name;

  @if ($type == "hide") {
    opacity: 0;
    visibility: hidden;
  } @else {
    opacity: 1;
    visibility: visible;
  }

  animation-duration: 1s;
  transition: opacity 0.8s;
}

@mixin hoverScale($scale) {
  @media (hover: hover) and (pointer: fine) {
    transition: transform 0.3s ease;

    &:hover {
      transform: scale(1.1);
    }
  }
}


//====STYLES=====//

//! OPTIONAL
:root {
  font-size: 62.5%;
}

$fs: 16px;

$desktop-heading: 3.0rem;// window * 1.96;
$desktop-subheading: 2.5rem;// smaller than heading;
$mobile-heading: 2.0rem;// 1.3 * mobile fs;
$mobile-subheading: 1.8rem; // smaller than mobile heading;

body {
  font-size: $fs;
}

h1 {
  font-size: $desktop-heading;
}

h2 {
  font-size: $desktop-subheading;
}

@media only screen and (max-width: 400px) {
  body {
    font-size: $fs; //! optional 16 or 14
  }

  h1 {
    font-size: $mobile-heading;
  }

  h2 {
    font-size: $mobile-subheading;
  }
}

$bs: rgba(0, 0, 0, 0.05) 0px 0px 0px 1px, rgb(209, 213, 219) 0px 0px 0px 1px inset;